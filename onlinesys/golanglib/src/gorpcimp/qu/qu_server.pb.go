// Code generated by protoc-gen-go.
// source: qu_server.proto
// DO NOT EDIT!

/*
Package qu is a generated protocol buffer package.

It is generated from these files:
	qu_server.proto

It has these top-level messages:
	QuServerRequest
	QuServerResponse
	Slot
	Intent
	QuResult
*/
package qu

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Qu Server Request
type QuServerRequest struct {
	// 整个系统串联的logid
	LogId string `protobuf:"bytes,1,opt,name=log_id,json=logId" json:"log_id,omitempty"`
	// 同时识别多个domain
	Domain []string `protobuf:"bytes,2,rep,name=domain" json:"domain,omitempty"`
	// 需要识别的query
	Query string `protobuf:"bytes,3,opt,name=query" json:"query,omitempty"`
}

func (m *QuServerRequest) Reset()                    { *m = QuServerRequest{} }
func (m *QuServerRequest) String() string            { return proto.CompactTextString(m) }
func (*QuServerRequest) ProtoMessage()               {}
func (*QuServerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// Qu Server Response
type QuServerResponse struct {
	// 处理结果状态;
	// 0 : 处理成功;非0异常状态码
	Status int32 `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
	// 识别结果
	QuRes []*QuResult `protobuf:"bytes,2,rep,name=qu_res,json=quRes" json:"qu_res,omitempty"`
}

func (m *QuServerResponse) Reset()                    { *m = QuServerResponse{} }
func (m *QuServerResponse) String() string            { return proto.CompactTextString(m) }
func (*QuServerResponse) ProtoMessage()               {}
func (*QuServerResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *QuServerResponse) GetQuRes() []*QuResult {
	if m != nil {
		return m.QuRes
	}
	return nil
}

type Slot struct {
	// 槽位名
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// 槽位值
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *Slot) Reset()                    { *m = Slot{} }
func (m *Slot) String() string            { return proto.CompactTextString(m) }
func (*Slot) ProtoMessage()               {}
func (*Slot) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type Intent struct {
	// 意图识别的置信度，目前固定是1分
	Score int32 `protobuf:"varint,1,opt,name=score" json:"score,omitempty"`
	// 该意图下可提取到的多个槽位信息
	Slot []*Slot `protobuf:"bytes,2,rep,name=slot" json:"slot,omitempty"`
	// 意图的附加信息，需求的细分类从这个字段解析出来
	ExtraAttr string `protobuf:"bytes,3,opt,name=extra_attr,json=extraAttr" json:"extra_attr,omitempty"`
}

func (m *Intent) Reset()                    { *m = Intent{} }
func (m *Intent) String() string            { return proto.CompactTextString(m) }
func (*Intent) ProtoMessage()               {}
func (*Intent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Intent) GetSlot() []*Slot {
	if m != nil {
		return m.Slot
	}
	return nil
}

// 一个domain对应一个qu结果
type QuResult struct {
	Domain string `protobuf:"bytes,1,opt,name=domain" json:"domain,omitempty"`
	// 识别出多个不同的意图
	Intent []*Intent `protobuf:"bytes,2,rep,name=intent" json:"intent,omitempty"`
}

func (m *QuResult) Reset()                    { *m = QuResult{} }
func (m *QuResult) String() string            { return proto.CompactTextString(m) }
func (*QuResult) ProtoMessage()               {}
func (*QuResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *QuResult) GetIntent() []*Intent {
	if m != nil {
		return m.Intent
	}
	return nil
}

func init() {
	proto.RegisterType((*QuServerRequest)(nil), "qu.QuServerRequest")
	proto.RegisterType((*QuServerResponse)(nil), "qu.QuServerResponse")
	proto.RegisterType((*Slot)(nil), "qu.Slot")
	proto.RegisterType((*Intent)(nil), "qu.Intent")
	proto.RegisterType((*QuResult)(nil), "qu.QuResult")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for QuServer service

type QuServerClient interface {
	// Query Parser
	Parse(ctx context.Context, in *QuServerRequest, opts ...grpc.CallOption) (*QuServerResponse, error)
}

type quServerClient struct {
	cc *grpc.ClientConn
}

func NewQuServerClient(cc *grpc.ClientConn) QuServerClient {
	return &quServerClient{cc}
}

func (c *quServerClient) Parse(ctx context.Context, in *QuServerRequest, opts ...grpc.CallOption) (*QuServerResponse, error) {
	out := new(QuServerResponse)
	err := grpc.Invoke(ctx, "/qu.QuServer/Parse", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for QuServer service

type QuServerServer interface {
	// Query Parser
	Parse(context.Context, *QuServerRequest) (*QuServerResponse, error)
}

func RegisterQuServerServer(s *grpc.Server, srv QuServerServer) {
	s.RegisterService(&_QuServer_serviceDesc, srv)
}

func _QuServer_Parse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuServerServer).Parse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qu.QuServer/Parse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuServerServer).Parse(ctx, req.(*QuServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _QuServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "qu.QuServer",
	HandlerType: (*QuServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Parse",
			Handler:    _QuServer_Parse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("qu_server.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 305 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x54, 0x51, 0x4d, 0x4b, 0x03, 0x31,
	0x10, 0xb5, 0x1f, 0x1b, 0xda, 0x51, 0xa8, 0xc4, 0x2a, 0x45, 0x14, 0x4a, 0xbc, 0x78, 0x5a, 0xa4,
	0xfa, 0x03, 0xf4, 0x22, 0xf4, 0xa4, 0xdd, 0x82, 0x17, 0x0f, 0x4b, 0x74, 0x83, 0x2c, 0x6c, 0x37,
	0xdd, 0x64, 0x52, 0xf4, 0xdf, 0x9b, 0x4c, 0x52, 0xb4, 0xb7, 0xbc, 0x37, 0x3b, 0xef, 0xbd, 0x7d,
	0x03, 0x93, 0xce, 0x95, 0x56, 0x99, 0x9d, 0x32, 0xf9, 0xd6, 0x68, 0xd4, 0xbc, 0xdf, 0x39, 0xf1,
	0x06, 0x93, 0x95, 0x5b, 0x13, 0x5b, 0xa8, 0xce, 0x29, 0x8b, 0xfc, 0x1c, 0x58, 0xa3, 0xbf, 0xca,
	0xba, 0x9a, 0xf5, 0xe6, 0xbd, 0xdb, 0x71, 0x91, 0x79, 0xb4, 0xac, 0xf8, 0x05, 0xb0, 0x4a, 0x6f,
	0x64, 0xdd, 0xce, 0xfa, 0xf3, 0x81, 0xa7, 0x13, 0xe2, 0x53, 0xc8, 0xfc, 0x9e, 0xf9, 0x99, 0x0d,
	0xe2, 0xd7, 0x04, 0xc4, 0x0b, 0x9c, 0xfe, 0xe9, 0xda, 0xad, 0x6e, 0xad, 0x0a, 0x0a, 0x16, 0x25,
	0x3a, 0x4b, 0xc2, 0x59, 0x91, 0x10, 0xbf, 0x01, 0xe6, 0xa3, 0x19, 0x65, 0x49, 0xf9, 0x78, 0x71,
	0x92, 0x77, 0x2e, 0x5f, 0x39, 0xbf, 0xe7, 0x1a, 0x0c, 0x82, 0xfe, 0x25, 0xee, 0x60, 0xb8, 0x6e,
	0x34, 0x72, 0x0e, 0xc3, 0x56, 0x6e, 0x54, 0xca, 0x46, 0xef, 0x10, 0x61, 0x27, 0x1b, 0xa7, 0xfc,
	0x3e, 0x45, 0x20, 0x20, 0xde, 0x81, 0x2d, 0x5b, 0x54, 0x2d, 0x86, 0xb9, 0xfd, 0xd4, 0x46, 0x25,
	0xdf, 0x08, 0xf8, 0x15, 0x0c, 0xad, 0x57, 0x4c, 0xa6, 0xa3, 0x60, 0x1a, 0x1c, 0x0a, 0x62, 0xf9,
	0x35, 0x80, 0xfa, 0x46, 0x23, 0x4b, 0x89, 0x68, 0xd2, 0xbf, 0x8d, 0x89, 0x79, 0xf2, 0x84, 0x78,
	0x86, 0xd1, 0x3e, 0xe1, 0xbf, 0x66, 0x62, 0xa8, 0x7d, 0x33, 0x02, 0x58, 0x4d, 0x01, 0x92, 0x05,
	0x04, 0x8b, 0x18, 0xa9, 0x48, 0x93, 0xc5, 0x63, 0xd0, 0x89, 0x3d, 0xf1, 0x07, 0xc8, 0x5e, 0xa5,
	0xf1, 0x45, 0x9d, 0xc5, 0x02, 0x0e, 0xce, 0x72, 0x39, 0x3d, 0x24, 0x63, 0xa7, 0xe2, 0xe8, 0x83,
	0xd1, 0x31, 0xef, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x67, 0xff, 0xc2, 0x52, 0xdf, 0x01, 0x00,
	0x00,
}

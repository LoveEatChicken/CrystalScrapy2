// Code generated by protoc-gen-go.
// source: session_server.proto
// DO NOT EDIT!

/*
Package session is a generated protocol buffer package.

It is generated from these files:
	session_server.proto

It has these top-level messages:
	SessionSvrGetReq
	SessionSvrGetRes
	SessionSvrSetReq
	SessionSvrSetRes
*/
package session

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 获取指定table中key为session_key的session信息
// 中控下游的不同垂类，一个垂类可以用一个table存储session数据
type SessionSvrGetReq struct {
	LogId      string   `protobuf:"bytes,1,opt,name=log_id,json=logId" json:"log_id,omitempty"`
	SessionKey string   `protobuf:"bytes,2,opt,name=session_key,json=sessionKey" json:"session_key,omitempty"`
	Table      []string `protobuf:"bytes,3,rep,name=table" json:"table,omitempty"`
}

func (m *SessionSvrGetReq) Reset()                    { *m = SessionSvrGetReq{} }
func (m *SessionSvrGetReq) String() string            { return proto.CompactTextString(m) }
func (*SessionSvrGetReq) ProtoMessage()               {}
func (*SessionSvrGetReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type SessionSvrGetRes struct {
}

func (m *SessionSvrGetRes) Reset()                    { *m = SessionSvrGetRes{} }
func (m *SessionSvrGetRes) String() string            { return proto.CompactTextString(m) }
func (*SessionSvrGetRes) ProtoMessage()               {}
func (*SessionSvrGetRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type SessionSvrSetReq struct {
}

func (m *SessionSvrSetReq) Reset()                    { *m = SessionSvrSetReq{} }
func (m *SessionSvrSetReq) String() string            { return proto.CompactTextString(m) }
func (*SessionSvrSetReq) ProtoMessage()               {}
func (*SessionSvrSetReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type SessionSvrSetRes struct {
}

func (m *SessionSvrSetRes) Reset()                    { *m = SessionSvrSetRes{} }
func (m *SessionSvrSetRes) String() string            { return proto.CompactTextString(m) }
func (*SessionSvrSetRes) ProtoMessage()               {}
func (*SessionSvrSetRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*SessionSvrGetReq)(nil), "session.SessionSvrGetReq")
	proto.RegisterType((*SessionSvrGetRes)(nil), "session.SessionSvrGetRes")
	proto.RegisterType((*SessionSvrSetReq)(nil), "session.SessionSvrSetReq")
	proto.RegisterType((*SessionSvrSetRes)(nil), "session.SessionSvrSetRes")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for SessionServer service

type SessionServerClient interface {
	Get(ctx context.Context, in *SessionSvrGetReq, opts ...grpc.CallOption) (*SessionSvrGetRes, error)
	Set(ctx context.Context, in *SessionSvrSetReq, opts ...grpc.CallOption) (*SessionSvrSetRes, error)
}

type sessionServerClient struct {
	cc *grpc.ClientConn
}

func NewSessionServerClient(cc *grpc.ClientConn) SessionServerClient {
	return &sessionServerClient{cc}
}

func (c *sessionServerClient) Get(ctx context.Context, in *SessionSvrGetReq, opts ...grpc.CallOption) (*SessionSvrGetRes, error) {
	out := new(SessionSvrGetRes)
	err := grpc.Invoke(ctx, "/session.SessionServer/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionServerClient) Set(ctx context.Context, in *SessionSvrSetReq, opts ...grpc.CallOption) (*SessionSvrSetRes, error) {
	out := new(SessionSvrSetRes)
	err := grpc.Invoke(ctx, "/session.SessionServer/Set", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SessionServer service

type SessionServerServer interface {
	Get(context.Context, *SessionSvrGetReq) (*SessionSvrGetRes, error)
	Set(context.Context, *SessionSvrSetReq) (*SessionSvrSetRes, error)
}

func RegisterSessionServerServer(s *grpc.Server, srv SessionServerServer) {
	s.RegisterService(&_SessionServer_serviceDesc, srv)
}

func _SessionServer_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionSvrGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/session.SessionServer/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServerServer).Get(ctx, req.(*SessionSvrGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionServer_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionSvrSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServerServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/session.SessionServer/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServerServer).Set(ctx, req.(*SessionSvrSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _SessionServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "session.SessionServer",
	HandlerType: (*SessionServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _SessionServer_Get_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _SessionServer_Set_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("session_server.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 183 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x29, 0x4e, 0x2d, 0x2e,
	0xce, 0xcc, 0xcf, 0x8b, 0x2f, 0x4e, 0x2d, 0x2a, 0x4b, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0x62, 0x87, 0x8a, 0x2a, 0x25, 0x70, 0x09, 0x04, 0x43, 0x98, 0xc1, 0x65, 0x45, 0xee, 0xa9,
	0x25, 0x41, 0xa9, 0x85, 0x42, 0xa2, 0x5c, 0x6c, 0x39, 0xf9, 0xe9, 0xf1, 0x99, 0x29, 0x12, 0x8c,
	0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0xac, 0x40, 0x9e, 0x67, 0x8a, 0x90, 0x3c, 0x17, 0x37, 0xcc, 0xac,
	0xec, 0xd4, 0x4a, 0x09, 0x26, 0xb0, 0x1c, 0x17, 0x54, 0xc8, 0x3b, 0xb5, 0x52, 0x48, 0x84, 0x8b,
	0xb5, 0x24, 0x31, 0x29, 0x27, 0x55, 0x82, 0x59, 0x81, 0x19, 0xa4, 0x0d, 0xcc, 0x51, 0x12, 0xc2,
	0xb0, 0xa1, 0x18, 0x55, 0x2c, 0x18, 0x6c, 0x2b, 0x16, 0xb1, 0x62, 0xa3, 0x5e, 0x46, 0x2e, 0x5e,
	0x98, 0x20, 0xd8, 0xf9, 0x42, 0xb6, 0x5c, 0xcc, 0x40, 0x33, 0x84, 0x24, 0xf5, 0xa0, 0xf6, 0xea,
	0xa1, 0xbb, 0x5e, 0x0a, 0xa7, 0x54, 0xb1, 0x12, 0x03, 0x48, 0x7b, 0x30, 0x0e, 0xed, 0xc1, 0xb8,
	0xb5, 0x07, 0x43, 0xb5, 0x27, 0xb1, 0x81, 0x43, 0xcf, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x15,
	0x31, 0x34, 0xb7, 0x55, 0x01, 0x00, 0x00,
}
